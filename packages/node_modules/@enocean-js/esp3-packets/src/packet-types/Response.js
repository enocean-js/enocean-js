import { ESP3Packet } from '../../../esp3-packet/src/esp3-packet.js'

export const RET_OK = 0x00
export const RET_ERROR = 0x01
export const RET_NOT_SUPPORTED = 0x02
export const RET_WRONG_PARAM = 0x03
export const RET_OPERATION_DENIED = 0x04
export const RET_LOCK_SET = 0x05
export const RET_BUFFER_TO_SMALL = 0x06
export const RET_NO_FREE_BUFFER = 0x07
export const FLASH_HW_ERROR = 0x82
export const BASEID_OUT_OF_RANGE = 0x90
export const BASEID_MAX_REACHE = 0x91

export const responseTypes = {
  [RET_OK]: 'RET_OK',
  [RET_ERROR]: 'RET_ERROR',
  [RET_NOT_SUPPORTED]: 'RET_NOT_SUPPORTED',
  [RET_WRONG_PARAM]: 'RET_WRONG_PARAM',
  [RET_OPERATION_DENIED]: 'RET_OPERATION_DENIED',
  [RET_LOCK_SET]: 'RET_LOCK_SET',
  [RET_BUFFER_TO_SMALL]: 'RET_BUFFER_TO_SMALL',
  [RET_NO_FREE_BUFFER]: 'RET_NO_FREE_BUFFER',
  [FLASH_HW_ERROR]: 'FLASH_HW_ERROR',
  [BASEID_OUT_OF_RANGE]: 'BASEID_OUT_OF_RANGE',
  [BASEID_MAX_REACHE]: 'BASEID_MAX_REACHE'
}

class Response extends ESP3Packet {
  get responseType () {
    return responseTypes[this.data[0]]
  }

  static encode (response, args = [], optionalArgs = []) {
    // make this accept json {code:1,period:100} ...
    var responseResponse = ESP3Packet.from({
      data: [response, args],
      optionalData: optionalArgs,
      packetType: 2
    })
    return new Response(responseResponse.toString())
  }

  decode (typeDesc = {}) {
    var res = Object.create({})
    if (typeDesc[this.data[0]]) {
      res = typeDesc[this.data[0]].reduce(ESP3Packet.fieldExtractor.bind(this), res)
    }
    res.returnCode = this.data[0]
    res.returnMsg = this.responseType
    return res
  }

  static from (input) {
    if (input.constructor.name === 'ESP3Packet') {
      return new Response(input.toString())
    }
  }
}
// export const Response = Object.create({})
// Response.from = function (esp3Packet, typeDesc = {}) {
//   const RETURN_CODE_LOCATION = 0
//   const responseTypes = {
//     0x00: 'RET_OK',
//     0x01: 'RET_ERROR',
//     0x02: 'RET_NOT_SUPPORTED',
//     0x03: 'RET_WRONG_PARAM',
//     0x04: 'RET_OPERATION_DENIED',
//     0x05: 'RET_LOCK_SET',
//     0x06: 'RET_BUFFER_TO_SMALL',
//     0x07: 'RET_NO_FREE_BUFFER',
//     0x82: 'FLASH_HW_ERROR',
//     0x90: 'BASEID_OUT_OF_RANGE',
//     0x91: 'BASEID_MAX_REACHED'
//   }
//   const packet = esp3Packet
//   var res = Object.create({})
//   if (typeDesc[packet.data[RETURN_CODE_LOCATION]]) {
//     res = typeDesc[packet.data[RETURN_CODE_LOCATION]].reduce(ESP3Packet.fieldExtractor.bind(packet), res)
//   }
//   res.returnCode = packet.data[0]
//   res.returnMsg = responseTypes[packet.data[0]]
//   res.getRawPacket = function () {
//     return packet.toString('hex')
//   }
//   return Object.freeze(res)
// }
export { Response }
export default Response
