import { ESP3Packet } from '../../esp3-packet/src/esp3-packet.js'
import { Response } from '../../esp3-packets/src/esp3-packets.js'
import { DESC_CO_WR_SLEEP } from './common-commands/CO_WR_SLEEP.js'
import { DESC_CO_WR_RESET } from './common-commands/CO_WR_RESET.js'
import { DESC_CO_RD_VERSION } from './common-commands/CO_RD_VERSION.js'
import { DESC_CO_RD_SYS_LOG } from './common-commands/CO_RD_SYS_LOG.js'
// import DESC_CO_WR_SYS_LOG from './common-commands/CO_WR_SYS_LOG.js'
// import DESC_CO_WR_BIST from './common-commands/CO_WR_BIST.js'
// import DESC_CO_WR_IDBASE from './common-commands/CO_WR_IDBASE.js'
import { DESC_CO_RD_IDBASE } from './common-commands/CO_RD_IDBASE.js'
// import DESC_CO_WR_REPEATER from './common-commands/CO_WR_REPEATER.js'
// import DESC_CO_RD_REPEATER from './common-commands/CO_RD_REPEATER.js'
// import DESC_CO_RD_FILTER from './common-commands/CO_RD_FILTER.js'
// import DESC_CO_WR_FILTER_ADD from './common-commands/CO_WR_FILTER_ADD.js'
// import DESC_CO_WR_FILTER_DEL from './common-commands/CO_WR_FILTER_DEL.js'
// import DESC_CO_WR_FILTER_DEL_ALL from './common-commands/CO_WR_FILTER_DEL_ALL.js'
// import DESC_CO_WR_FILTER_ENABLE from './common-commands/CO_WR_FILTER_ENABLE.js'
// import DESC_CO_WR_WAIT_MATURITY from './common-commands/CO_WR_WAIT_MATURITY.js'
// import DESC_CO_WR_SUBTEL from './common-commands/CO_WR_SUBTEL.js'
// import DESC_CO_RD_MEM_ADDRESS from './common-commands/CO_RD_MEM_ADDRESS.js'
// import DESC_CO_RD_MEM from './common-commands/CO_RD_MEM.js'
// import DESC_CO_WR_MEM from './common-commands/CO_WR_MEM.js'
// import DESC_CO_WR_LEARNMODE from './common-commands/CO_WR_LEARNMODE.js'
// import DESC_CO_RD_LEARNMODE from './common-commands/CO_RD_LEARNMODE.js'
// import DESC_CO_WR_MODE from './common-commands/CO_WR_MODE.js'
// import DESC_CO_RD_NUMSECUREDEVICES from './common-commands/CO_RD_NUMSECUREDEVICES.js'
// import DESC_CO_RD_DUTYCYCLE_LIMIT from './common-commands/CO_RD_DUTYCYCLE_LIMIT.js'
// import DESC_CO_SET_BAUDRATE from './common-commands/CO_SET_BAUDRATE.js'
import { DESC_CO_GET_FREQUENCY_INFO } from './common-commands/CO_GET_FREQUENCY_INFO.js'
// import DESC_CO_WR_REMAN_CODE from './common-commands/CO_WR_REMAN_CODE.js'

export const CO_WR_SLEEP = 0x01
export const CO_WR_RESET = 0x02
export const CO_RD_VERSION = 0x03
export const CO_RD_SYS_LOG = 0x04
//
export const CO_RD_IDBASE = 0x08
//
export const CO_GET_FREQUENCY_INFO = 0x25

export const commandTypes = {
  [CO_WR_SLEEP]: DESC_CO_WR_SLEEP,
  [CO_WR_RESET]: DESC_CO_WR_RESET,
  [CO_RD_VERSION]: DESC_CO_RD_VERSION,
  [CO_RD_SYS_LOG]: DESC_CO_RD_SYS_LOG,
  // CO_WR_SYS_LOG,
  // CO_WR_BIST,
  // CO_WR_IDBASE,
  [CO_RD_IDBASE]: DESC_CO_RD_IDBASE,
  // CO_WR_REPEATER,
  // CO_RD_REPEATER,
  // CO_RD_FILTER,
  // CO_WR_FILTER_ADD,
  // CO_WR_FILTER_DEL,
  // CO_WR_FILTER_DEL_ALL,
  // CO_WR_FILTER_ENABLE,
  // CO_WR_WAIT_MATURITY,
  // CO_WR_SUBTEL,
  // CO_RD_MEM_ADDRESS,
  // CO_RD_MEM,
  // CO_WR_MEM,
  // CO_WR_LEARNMODE,
  // CO_RD_LEARNMODE,
  // CO_WR_MODE,
  // CO_RD_NUMSECUREDEVICES,
  // CO_RD_DUTYCYCLE_LIMIT,
  // CO_SET_BAUDRATE,
  [CO_GET_FREQUENCY_INFO]: DESC_CO_GET_FREQUENCY_INFO
  // CO_WR_REMAN_CODE
}

export const BLOCK_RADIO_INTERFACE = 0x00
export const APPLY_RADIO_INTERFACE = 0x80
export const BLOCK_FILTERED_REPEATER = 0x40
export const APPLY_FILTERED_REPEATER = 0xC0
export const FILTER_SOURCE_ID = 0x00
export const FILTER_RORG = 0x01
export const FILTER_RSSI = 0x02
export const FILTER_DESTINATION_ID = 0x03
export const FILTER_OFF = 0x00
export const FILTER_ON = 0x01
export const FILTER_OPERATOR_OR = 0x00
export const FILTER_OPERATOR_AND = 0x01
export const FILTER_OPERATOR_OR_AND = 0x08
export const FILTER_OPERATOR_AND_OR = 0x09

class CommonCommand extends ESP3Packet {
  get commandType () {
    return commandTypes[this.data[0]]
  }

  static encode (command, args = [], optionalArgs = []) {
    // make this accept json {code:1,period:100} ...
    // json can be accepted in .from()
    var commonCommand = ESP3Packet.from({
      data: [command, args],
      optionalData: optionalArgs,
      packetType: 5
    })
    return new CommonCommand(commonCommand.toString())
  }

  decode () {
    var res = this.commandType.fields.reduce(ESP3Packet.fieldExtractor.bind(this), Object.create({}))
    res.commandCode = this.data[0]
    res.command = this.commandType.name
    return res
  }

  static from (input) {
    if (input.constructor.name === 'ESP3packet') {
      return new CommonCommand(input.toString())
    }
  }
}

export class Commander {
  constructor (sender) {
    this.send = sender.send
  }

  async getIdBase () {
    var tel = CommonCommand.encode(CO_RD_IDBASE)
    var res = await this.send(tel.toString())
    var result = new Response(res.toString())
    return result.decode(commandTypes[CO_RD_IDBASE].responseDefinition)
  }

  async getVersion () {
    var tel = CommonCommand.encode(CO_RD_VERSION)
    var res = await this.send(tel.toString())
    var result = new Response(res.toString())
    return result.decode(commandTypes[CO_RD_VERSION].responseDefinition)
  }

  async getFrequency () {
    var tel = CommonCommand.encode(CO_GET_FREQUENCY_INFO)
    var res = await this.send(tel.toString())
    var result = new Response(res.toString())
    return result.decode(commandTypes[CO_GET_FREQUENCY_INFO].responseDefinition)
  }
}

// export const CommonCommand = Object.create({})
// CommonCommand.from = function (esp3Packet) {
//   const COMMAND_TYPE_LOCATION = 0
//   var res = Object.create({
//     get commandType () {
//       return commandTypes[esp3Packet.data[COMMAND_TYPE_LOCATION]]
//     }
//   })
//   return Object.freeze(res)
// }

// CommonCommand.connect = function (sender) {
//   var packet = ESP3Packet.from('5500010005000000')
//   var commonCommand = CommonCommand.from(packet)
//   const members = {
//     send (command, args = [], optionalArgs = []) {
//       var com = commandTypes[command]
//       commonCommand = ESP3Packet.from({
//         data: [com.commandCode, args],
//         optionalData: optionalArgs,
//         packetType: 5
//       })
//       // pretty.logESP3(commonCommand)
//       return sender.send(commonCommand.toString('hex'), com.responsDefinition)
//     },
//     reset () {
//       return this.send('CO_WR_RESET')
//     },
//     sleep (ms) {
//       const cs = Math.floor(ms / 10).toString(16).padStart(6, '0')
//       return this.send('CO_WR_SLEEP', [0, cs])
//     },
//     getVersion () {
//       return this.send('CO_RD_VERSION')
//     },
//     getSysLog () {
//       return this.send('CO_RD_SYS_LOG')
//     },
//     resetSysLog () {
//       return this.send('CO_WR_SYS_LOG')
//     },
//     selfTest () {
//       return this.send('CO_WR_BIST')
//     },
//     setBaseId (id) {
//       return this.send('CO_WR_IDBASE', id)
//     },
//     getBaseId (id) {
//       return this.send('CO_RD_IDBASE')
//     },
//     setRepeater (enable, level = 0) {
//       if (enable > 0 && level === 0) level = 1
//       return this.send('CO_WR_REPEATER', [enable, level])
//     },
//     getRepeater () {
//       return this.send('CO_RD_REPEATER')
//     },
//     getFilter () {
//       return this.send('CO_RD_FILTER')
//     },
//     addFilter (type, value, kind) {
//       var val = value.toString(16).padStart(8, '0')
//       return this.send('CO_WR_FILTER_ADD', [type, val, kind])
//     },
//     addRadioFilter (type, kind, value) {
//       var val = value.toString(16).padStart(8, '0')
//       const types = {
//         'source': FILTER_SOURCE_ID,
//         'destination': FILTER_DESTINATION_ID,
//         'rssi': FILTER_RSSI,
//         'rorg': FILTER_RORG
//       }
//       const kinds = {
//         'apply': APPLY_RADIO_INTERFACE,
//         'block': BLOCK_RADIO_INTERFACE
//       }
//       return this.addFilter(types[type], val, kinds[kind])
//     },
//     addRepeatFilter (type, kind, value) {
//       var val = value.toString(16).padStart(8, '0')
//       const types = {
//         'source': FILTER_SOURCE_ID,
//         'destination': FILTER_DESTINATION_ID,
//         'rssi': FILTER_RSSI,
//         'rorg': FILTER_RORG
//       }
//       const kinds = {
//         'apply': APPLY_FILTERED_REPEATER,
//         'block': BLOCK_FILTERED_REPEATER
//       }
//       return this.addFilter(types[type], val, kinds[kind])
//     },
//     deleteFilter (type, value, kind) {
//       var val = value.toString(16).padStart(8, '0')
//       return this.send('CO_WR_FILTER_DEL', [type, val, kind])
//     },
//     deleteAllFilters () {
//       return this.send('CO_WR_FILTER_DEL_ALL')
//     },
//     enableFilters (operator = 'or') {
//       const op = {
//         'or': 0,
//         'and': 1
//       }
//       return this.send('CO_WR_FILTER_ENABLE', [1, op[operator]])
//     },
//     disableFilters () {
//       return this.send('CO_WR_FILTER_ENABLE', [0, 0])
//     },
//     enableWaitMaturity () {
//       return this.send('CO_WR_WAIT_MATURITY', 1)
//     },
//     disableWaitMaturity () {
//       return this.send('CO_WR_WAIT_MATURITY', 0)
//     },
//     enableSubTel () {
//       return this.send('CO_WR_SUBTEL', 1)
//     },
//     disableSubTel () {
//       return this.send('CO_WR_SUBTEL', 0)
//     },
//     getMemoryAddress (area = 0) {
//       return this.send('CO_RD_MEM_ADDRESS', area)
//     },
//     readMemory (type, address, length) {
//       var addr = address.toString(16).padStart(8, '0')
//       var len = length.toString(16).padStart(4, '0')
//       return this.send('CO_RD_MEM', [type, addr, len])
//     },
//     writeMemory (type, address, data) {
//       var addr = address.toString(16).padStart(8, '0')
//       return this.send('CO_WR_MEM', [type, addr, data])
//     },
//     startLearnMode (timeout = 0, channel = 0xff) {
//       var tout = timeout.toString(16).padStart(8, '0')
//       return this.send('CO_WR_LEARNMODE', [1, tout], 'ff')
//     },
//     stopLearnMode (timeout = 0, channel = 0xff) {
//       var tout = timeout.toString(16).padStart(8, '0')
//       return this.send('CO_WR_LEARNMODE', [0, tout], 'ff')
//     },
//     isLearnModeActive (timeout = 0, channel = 0xff) {
//       return this.send('CO_RD_LEARNMODE')
//     },
//     setERP1Mode () {
//       return this.send('CO_WR_MODE', 0)
//     },
//     setERP2Mode () {
//       return this.send('CO_WR_MODE', 1)
//     },
//     getSecureDeviceCount (direction) {
//       return this.send('CO_RD_NUMSECUREDEVICES', [], direction)
//     },
//     getDutyCycle () {
//       return this.send('CO_RD_DUTYCYCLE_LIMIT')
//     },
//     setBaudRate (id) {
//       return this.send('CO_SET_BAUDRATE', id)
//     },
//     setPin (id = '00000000') {
//       return this.send('CO_WR_REMAN_CODE', id)
//     }
//   }
//   return Object.freeze(members)
// }
export { CommonCommand }
export default CommonCommand
